version: 2.1

references:
  ci_image: &ci_image
    image: circleci/node:latest
  terraform_image: &terraform_image
    image: hashicorp/terraform:0.12.20
  helm_image: &helm_image
    image: quay.io/reactiveops/ci-images:v8.0.1-alpine
  set_env: &set_env
    run:
      name: Set Environment Variables Specific to a Build Environment
      command: |
        echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_<< parameters.aws_env >>' >> ${BASH_ENV}
        echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_<< parameters.aws_env >>' >> ${BASH_ENV}
  set_environment_variables: &set_environment_variables
    run:
      name: Set General Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_USERNAME=$CIRCLE_USERNAME' >> ${BASH_ENV}
        echo 'export COMMIT_MESSAGE=$(git log --oneline --format=%B HEAD~1 | head -n 1)' >> ${BASH_ENV}
        echo 'export PREVIOUS_COMMIT=$(git rev-parse HEAD~1)' >> ${BASH_ENV}
        echo 'export NR_APP_ID=$NR_APP_ID' >> ${BASH_ENV}
        echo 'export NR_APIKEY=$NR_APIKEY' >> ${BASH_ENV}

jobs:
  docker-build-push-to-dockerhub:
    docker:
      - *ci_image
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "${DOCKERHUB_TOKEN}" | docker login --username="irynalian" --password-stdin
      - run: docker build -t irynalian/serverless:latest .
      - run: docker push irynalian/serverless:latest
  terraform:
    parameters:
      ci_env:
        description: The AWS environment that will be accessed
        type: enum
        enum: ["serverless", "staging", "production"]
      terraform_action:
        description: Action for terraform to perform
        type: enum
        enum: ["plan", "apply"]
    docker:
      - *terraform_image
    steps:
      - checkout
      - run:
          name: Terraform << parameters.terraform_action >> Infrastructure Changes
          command: |
            cat > ~/.terraformrc \<<EOF
            credentials "app.terraform.io" {
              token = "${TF_TOKEN}"
            }
            EOF
            export TF_WORKSPACE=<< parameters.ci_env >>
            cd terraform
            terraform init
            if [ << parameters.terraform_action >> = "apply" ]
            then
                terraform << parameters.terraform_action >> -auto-approve
            else
                terraform << parameters.terraform_action >>
            fi
  deploy:
    parameters:
      aws_env:
        description: The AWS environment that will be accessed
        type: enum
        enum: ["DEV", "STAGING", "PROD"]
      ci_env:
        description: The build environment the job is running on
        type: enum
        enum: ["staging", "production"]
      slack_failure_notify:
        type: boolean
        default: false
    docker:
      - *ci_image
    steps:
      - checkout
      - *set_environment_variables
      - *set_env
      - run:
          name: Helm Lint
          command: helm lint --strict -f deploy/${CI_ENV}/${CIRCLE_PROJECT_REPONAME}.values.yml deploy/charts/${CIRCLE_PROJECT_REPONAME}
      - run:
          name: Helm Template and Kubeval
          command: helm template -f deploy/${CI_ENV}/${CIRCLE_PROJECT_REPONAME}.values.yml deploy/charts/${CIRCLE_PROJECT_REPONAME} | kubeval
      - run:
          name: Prepare kubectl
          command: prepare-kubectl
      - run:
          name: Helm Deploy
          command: ROK8S_HELM_DEPLOY_EXTRAARGS="--force --atomic --description ${CI_SHA1} --set schema_rambler_password=${SCHEMA_RAMBLER_PASSWORD} --set secretSum=$(sha256sum deploy/${CI_ENV}/${CIRCLE_PROJECT_REPONAME}-env.secret.sops.yml | awk '{ print $1 }')"
            helm-deploy -f deploy/${CI_ENV}/config.env

workflows:
  build:
    jobs:
      - docker-build-push-to-dockerhub
      - terraform:
          name: staging-terraform-plan
          context: stockx-services
          ci_env: staging
          terraform_action: plan
          requires:
            - docker-build-push-to-dockerhub
      - staging-terraform-approval:
          type: approval
          requires:
            - staging-terraform-plan
      - terraform:
          name: staging-terraform-apply
          context: stockx-services
          ci_env: staging
          terraform_action: apply
          requires:
            - staging-terraform-approval
      - deploy:
          aws_env: STAGING
          ci_env: staging
          requires:
            - staging-terraform-apply
